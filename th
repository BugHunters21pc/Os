//sample program1

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>
// Let us create a global variable to change it in threads
int g = 0;
// The function to be executed by all threads
void *myThreadFun(void *vargp)
{
// Store the value argument passed to this thread
int *myid = (int *)vargp;
// Let us create a static variable to observe its changes
int s = 0;
// Change static and global variables
++s; ++g;
// Print the argument, static and global variables
printf("Thread ID: %d, Static: %d, Global: %d\n", *myid, ++s, ++g);
}
int main()
{
int i;
pthread_t tid1,tid2,tid3; //variables used to store thread id
// Let us create three threads
pthread_create(&tid1, NULL, myThreadFun, (void *)&tid1);
pthread_create(&tid2, NULL, myThreadFun, (void *)&tid2);
pthread_create(&tid3, NULL, myThreadFun, (void *)&tid3);
pthread_join(tid1, NULL);
pthread_join(tid2, NULL);
pthread_join(tid3, NULL);
return 0;
}

//sample program2

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <pthread.h>
#include <unistd.h>
#define NUM_THREADS 5
void *perform_work(void *arguments)
{
int index = *((int *)arguments);
int sleep_time = 1 + rand() % NUM_THREADS;
printf("THREAD %d: Started.\n", index);
printf("THREAD %d: Will be sleeping for %d seconds.\n", index, sleep_time);
sleep(sleep_time);
printf("THREAD %d: Ended.\n", index);
}
int main(void)
{
pthread_t threads[NUM_THREADS];
int thread_args[NUM_THREADS];
int i;
int result_code;
//create all threads one by one
for (i = 0; i < NUM_THREADS; i++)
{
printf("IN MAIN: Creating thread %d.\n", i);
thread_args[i] = i;
result_code = pthread_create(&threads[i], NULL, perform_work, &thread_args[i]);
}
printf("IN MAIN: All threads are created.\n");
//wait for each thread to complete
for (i = 0; i < NUM_THREADS; i++)
{
result_code = pthread_join(threads[i], NULL);
printf("IN MAIN: Thread %d has ended.\n", i);
}
printf("MAIN program has ended.\n");
return 0;
}

//Simple Semaphore Code to synchronize 2 threads

#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
sem_t mutex;
void* thread(void* arg)
{
sem_wait(&mutex);
printf("\nEntered critical section..\n");
//critical section sode
sleep(4);
//signal
printf("\nJust Exiting critical section...\n");
sem_post(&mutex);
}
int main()
{
sem_init(&mutex, 0, 1);
pthread_t t1,t2;
pthread_create(&t1,NULL,thread,NULL);
// sleep(2);
pthread_create(&t2,NULL,thread,NULL);
pthread_join(t1,NULL);
pthread_join(t2,NULL);
sem_destroy(&mutex);
return 0;
}

//Code for readers writers problem

#include<stdio.h>
#include<pthread.h>
#include<semaphore.h>
sem_t mutex,writeblock;
int data = 0,rcount = 0;
void *reader(void *arg)
{
int f;
f = ((int)arg);
sem_wait(&mutex);
rcount = rcount + 1;
printf("\nReader %d has arrived \n",f);
if(rcount==1)
sem_wait(&writeblock);
sem_post(&mutex);
printf("\nReader Entered %d Data read by the reader is %d\n",f,data);
sleep(4);
sem_wait(&mutex);
rcount = rcount - 1;
printf("\nReader Exiting : %d Remaining Readers:%d \n",f,rcount);
if(rcount==0)
{
printf("\nNo readers Writers can write\n");
sem_post(&writeblock);
}
sem_post(&mutex);
}
void *writer(void *arg)
{
int f;
f = ((int) arg);
printf("\nWriter %d has arrived\n",f);
sem_wait(&writeblock);
data++;
printf("\nWriter Entered %d Data writen by the writer is %d\n",f,data);
sleep(2);
printf("\nWriter Exiting : %d\n",f);
sem_post(&writeblock);
}
main()
{
int i,b;
pthread_t rtid[5],wtid[5];
sem_init(&mutex,0,1);
sem_init(&writeblock,0,1);
for(i=0;i<=2;i++)
{
pthread_create(&wtid[i],NULL,writer,(void *)i);
sleep(2);
pthread_create(&rtid[i],NULL,reader,(void *)i);
}
for(i=0;i<=2;i++)
{
pthread_join(wtid[i],NULL);
pthread_join(rtid[i],NULL);
}
}

//Cars and tunnels problem

#include<stdio.h>
#include<pthread.h>
#include<semaphore.h>
#include<unistd.h>
#include<string.h>
sem_t mutex;
int southcount=0,northcount=0;
void* tunnel(void* arg)
{
if(strcmp(arg,"North")==0)
{
while(southcount>0)
sem_wait(&mutex);
northcount++;
}
else
{
while(northcount>0)
sem_wait(&mutex);
southcount++;
}
printf("\n %s : Entered \n",(char*)arg);
//CriticalSection
//sleep(3);
printf("\n %s : Exiting \n",(char*)arg);
if(strcmp(arg,"North")==0)
{
northcount--;
}
else
{
southcount--;
}
sem_post(&mutex);
return 0;
}
int main()
{
sem_init(&mutex,0,1);
pthread_t t1,t2,t3,t4,t5,t6,t7,t8;
char *msg1="North",*msg2="South";
pthread_create(&t1,NULL,tunnel,(void*)msg1);
pthread_create(&t2,NULL,tunnel,(void*)msg1);
pthread_create(&t3,NULL,tunnel,(void*)msg2);
pthread_create(&t4,NULL,tunnel,(void*)msg2);
pthread_create(&t5,NULL,tunnel,(void*)msg2);
pthread_create(&t6,NULL,tunnel,(void*)msg1);
// pthread_create(&t7,NULL,tunnel,(void*)msg1);
// pthread_create(&t8,NULL,tunnel,(void*)msg2);
pthread_join(t1,NULL);
pthread_join(t2,NULL);
pthread_join(t3,NULL);
pthread_join(t4,NULL);
pthread_join(t5,NULL);
pthread_join(t6,NULL);
pthread_join(t7,NULL);
pthread_join(t8,NULL);
sem_destroy(&mutex);
}

//or

#include<stdio.h>
#include<pthread.h>
#include<semaphore.h>
#include<unistd.h>
#include<string.h>
sem_t mutexNorth, mutexSouth;
void* tunnel(void* arg)
{
if(strcmp(arg,"North")==0)
sem_wait(&mutexSouth);
else
sem_wait(&mutexNorth);
printf("\n %s : Entered \n",(char*)arg);
//CriticalSection
sleep(3);
printf("\n %s : Exiting \n",(char*)arg);
if(strcmp(arg,"North")==0)
sem_post(&mutexSouth);
else
sem_post(&mutexNorth);
return 0;
}
int main()
{
sem_init(&mutexNorth,0,1);
sem_init(&mutexSouth,0,1);
pthread_t t1,t2,t3,t4,t5,t6,t7,t8;
char *msg1="North",*msg2="South";
pthread_create(&t1,NULL,tunnel,(void*)msg1);
pthread_create(&t2,NULL,tunnel,(void*)msg1);
pthread_create(&t3,NULL,tunnel,(void*)msg1);
pthread_create(&t4,NULL,tunnel,(void*)msg2);
pthread_create(&t5,NULL,tunnel,(void*)msg1);
pthread_create(&t6,NULL,tunnel,(void*)msg2);
pthread_create(&t7,NULL,tunnel,(void*)msg1);
pthread_create(&t8,NULL,tunnel,(void*)msg2);
pthread_join(t1,NULL);
pthread_join(t2,NULL);
pthread_join(t3,NULL);
pthread_join(t4,NULL);
pthread_join(t5,NULL);
pthread_join(t6,NULL);
pthread_join(t7,NULL);
pthread_join(t8,NULL);
sem_destroy(&mutexNorth);
sem_destroy(&mutexSouth);
}

//5 philosopher using mutex

#include <stdlib.h>
#include <pthread.h>
#include <stdio.h>

#define NUM_PHILOSOPHERS 5
#define LEFT(i) ((i + NUM_PHILOSOPHERS - 1) % NUM_PHILOSOPHERS)
#define RIGHT(i) ((i + 1) % NUM_PHILOSOPHERS)

pthread_mutex_t chopstick[NUM_PHILOSOPHERS];
int state[NUM_PHILOSOPHERS];

void think(int philosopher_id) {
    printf("Philosopher %d is thinking...\n", philosopher_id);
    sleep(rand() % 5);
}

void eat(int philosopher_id) {
    printf("Philosopher %d is eating...\n", philosopher_id);
    sleep(rand() % 5);
}

void pickup_chopsticks(int philosopher_id) {
    pthread_mutex_lock(&chopstick[LEFT(philosopher_id)]);
    pthread_mutex_lock(&chopstick[RIGHT(philosopher_id)]);
}

void return_chopsticks(int philosopher_id) {
    pthread_mutex_unlock(&chopstick[LEFT(philosopher_id)]);
    pthread_mutex_unlock(&chopstick[RIGHT(philosopher_id)]);
}

void* philosopher(void* philosopher_id) {
    int id = *(int*)philosopher_id;
    while(1) {
        think(id);
        pickup_chopsticks(id);
        eat(id);
        return_chopsticks(id);
    }
}

int main() {
    pthread_t threads[NUM_PHILOSOPHERS];
    int ids[NUM_PHILOSOPHERS];
    int i;

    srand(time(NULL));

    for(i = 0; i < NUM_PHILOSOPHERS; i++) {
        ids[i] = i;
        pthread_mutex_init(&chopstick[i], NULL);
        pthread_create(&threads[i], NULL, philosopher, (void*)&ids[i]);
    }

    for(i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(threads[i], NULL);
    }

    for(i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&chopstick[i]);
    }

    return 0;
}

//5 philosopher using semaphore

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>
#include <semaphore.h>

#define NUM_PHILOSOPHERS 5

pthread_t threads[NUM_PHILOSOPHERS];
sem_t chopstick[NUM_PHILOSOPHERS];

void think(int philosopher_id) {
    printf("Philosopher %d is thinking...\n", philosopher_id);
    sleep(rand() % 5);
}

void eat(int philosopher_id) {
    printf("Philosopher %d is eating...\n", philosopher_id);
    sleep(rand() % 5);
}

void pickup_chopsticks(int philosopher_id) {
    sem_wait(&chopstick[philosopher_id]);
    sem_wait(&chopstick[(philosopher_id + 1) % NUM_PHILOSOPHERS]);
}

void return_chopsticks(int philosopher_id) {
    sem_post(&chopstick[philosopher_id]);
    sem_post(&chopstick[(philosopher_id + 1) % NUM_PHILOSOPHERS]);
}

void* philosopher(void* philosopher_id) {
    int id = *(int*)philosopher_id;
    while(1) {
        think(id);
        pickup_chopsticks(id);
        eat(id);
        return_chopsticks(id);
    }
}

int main() {
    int ids[NUM_PHILOSOPHERS];
    int i;

    srand(time(NULL));

    for(i = 0; i < NUM_PHILOSOPHERS; i++) {
        ids[i] = i;
        sem_init(&chopstick[i], 0, 1);
        pthread_create(&threads[i], NULL, philosopher, (void*)&ids[i]);
    }

    for(i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(threads[i], NULL);
    }

    for(i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_destroy(&chopstick[i]);
    }

    return 0;
}

//barber and customer problem using semaphore

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define NUM_CHAIRS 3

sem_t waiting_room_seats;
sem_t barber_chair;
sem_t customer;
sem_t barber;

void* barber_thread(void* arg);
void* customer_thread(void* arg);

int main()
{
    pthread_t barber_tid;
    pthread_t customer_tid;

    sem_init(&waiting_room_seats, 0, NUM_CHAIRS);
    sem_init(&barber_chair, 0, 1);
    sem_init(&customer, 0, 0);
    sem_init(&barber, 0, 0);

    pthread_create(&barber_tid, NULL, barber_thread, NULL);

    while(1) {
        sleep(rand()%10);
        pthread_create(&customer_tid, NULL, customer_thread, NULL);
    }

    return 0;
}

void* barber_thread(void* arg)
{
    while(1) {
        printf("Barber is sleeping.\n");
        sem_wait(&customer);
        sem_wait(&waiting_room_seats);

        printf("Barber is cutting hair.\n");
        sleep(rand()%5);

        sem_post(&barber);
        sem_post(&waiting_room_seats);
    }
}

void* customer_thread(void* arg)
{
    if(sem_trywait(&waiting_room_seats) == 0) {
        printf("Customer is sitting in the waiting room.\n");
        sem_post(&customer);
        sem_wait(&barber);

        printf("Customer is getting a haircut.\n");
    }
    else {
        printf("There are no free seats in the waiting room. Customer is leaving.\n");
    }

    pthread_exit(NULL);
}

// barber and customer using semaphores

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_CHAIRS 3
#define NUM_CUSTOMERS 10

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t barber_cond = PTHREAD_COND_INITIALIZER;
pthread_cond_t customer_cond = PTHREAD_COND_INITIALIZER;

int num_customers_waiting = 0;
int num_customers_served = 0;
int barber_sleeping = 0;

void barber()
{
    while(1) {
        pthread_mutex_lock(&mutex);
        if(num_customers_waiting == 0) {
            barber_sleeping = 1;
            printf("Barber is sleeping...\n");
            pthread_cond_wait(&barber_cond, &mutex);
        }
        else {
            barber_sleeping = 0;
            printf("Barber is cutting hair...\n");
            num_customers_waiting--;
            pthread_cond_signal(&customer_cond);
            pthread_mutex_unlock(&mutex);
            sleep(rand() % 5);
            num_customers_served++;
        }
        pthread_mutex_unlock(&mutex);
    }
}

void customer(int id)
{
    pthread_mutex_lock(&mutex);
    if(num_customers_waiting >= NUM_CHAIRS) {
        printf("Customer %d is leaving the shop...\n", id);
        pthread_mutex_unlock(&mutex);
        return;
    }
    num_customers_waiting++;
    printf("Customer %d is waiting...\n", id);
    if(barber_sleeping) {
        printf("Barber is sleeping, waking up barber...\n");
        pthread_cond_signal(&barber_cond);
    }
    else {
        pthread_cond_signal(&customer_cond);
    }
    pthread_mutex_unlock(&mutex);
    pthread_mutex_lock(&mutex);
    while(barber_sleeping == 0 && num_customers_waiting > 0) {
        pthread_cond_wait(&customer_cond, &mutex);
    }
    if(num_customers_waiting == 0) {
        printf("Customer %d is leaving the shop...\n", id);
        pthread_mutex_unlock(&mutex);
        return;
    }
    printf("Customer %d is getting a haircut...\n", id);
    pthread_mutex_unlock(&mutex);
}

int main()
{
    pthread_t barber_thread;
    pthread_t customer_threads[NUM_CUSTOMERS];
    int ids[NUM_CUSTOMERS];
    int i;

    srand(time(NULL));

    pthread_create(&barber_thread, NULL, (void*)&barber, NULL);
    for(i = 0; i < NUM_CUSTOMERS; i++) {
        ids[i] = i;
        pthread_create(&customer_threads[i], NULL, (void*)&customer, (void*)&ids[i]);
        sleep(rand() % 3);
    }

    for(i = 0; i < NUM_CUSTOMERS; i++) {
        pthread_join(customer_threads[i], NULL);
    }

    pthread_cancel(barber_thread);

    printf("%d customers were served today!\n", num_customers_served);

    return 0;
}


// cars and tunnel semaphore's 

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NUM_CARS 10
#define MAX_CARS_IN_TUNNEL 1

enum Direction {
    NORTH,
    SOUTH
};

sem_t mutex; // semaphore to protect critical section
sem_t north_direction; // semaphore to signal northbound cars
sem_t south_direction; // semaphore to signal southbound cars
int num_cars_in_tunnel = 0; // number of cars in the tunnel

void* car(void* arg) {
    int direction = *(int*)arg;
    printf("Car arrived from %s\n", direction == NORTH ? "north" : "south");
    sem_wait(&mutex); // enter critical section
    if ((direction == NORTH && num_cars_in_tunnel > 0) || 
        (direction == SOUTH && num_cars_in_tunnel < 0)) {
        printf("Car from %s has to wait\n", direction == NORTH ? "north" : "south");
        if (direction == NORTH) {
            sem_post(&north_direction); // signal northbound cars
        } else {
            sem_post(&south_direction); // signal southbound cars
        }
        sem_post(&mutex); // leave critical section
        if (direction == NORTH) {
            sem_wait(&south_direction); // wait for southbound cars to clear the tunnel
        } else {
            sem_wait(&north_direction); // wait for northbound cars to clear the tunnel
        }
        sem_wait(&mutex); // re-enter critical section
    }
    printf("Car from %s enters the tunnel\n", direction == NORTH ? "north" : "south");
    num_cars_in_tunnel += direction == NORTH ? 1 : -1; // update number of cars in tunnel
    sem_post(&mutex); // leave critical section
    sleep(rand() % 5); // simulate time in tunnel
    sem_wait(&mutex); // enter critical section
    printf("Car from %s exits the tunnel\n", direction == NORTH ? "north" : "south");
    num_cars_in_tunnel -= direction == NORTH ? 1 : -1; // update number of cars in tunnel
    if (num_cars_in_tunnel == 0) {
        if (direction == NORTH) {
            sem_post(&south_direction); // signal southbound cars
        } else {
            sem_post(&north_direction); // signal northbound cars
        }
    }
    sem_post(&mutex); // leave critical section
    pthread_exit(NULL);
}

int main() {
    pthread_t threads[NUM_CARS];
    int directions[NUM_CARS];
    int i;
    srand(time(NULL));
    sem_init(&mutex, 0, 1);
    sem_init(&north_direction, 0, 1);
    sem_init(&south_direction, 0, 1);
    for (i = 0; i < NUM_CARS; i++) {
        directions[i] = rand() % 2; // randomly generate direction
        pthread_create(&threads[i], NULL, car, (void*)&directions[i]);
        sleep(rand() % 2); // simulate arrival time
    }
    for (i = 0; i < NUM_CARS; i++) {
        pthread_join(threads[i], NULL);
    }
    sem_destroy(&mutex);
    sem_destroy(&north_direction);
    sem_destroy(&south_direction);
    return 0;
}

// cars and tunnels using mutex

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_THREADS 2

pthread_mutex_t mutex;
int direction = 0; // 0: North-South, 1: South-North

void* car(void* arg) {
    int id = *(int*)arg;
    int dir = rand() % 2; // Randomly choose direction

    // Arrive at the tunnel
    pthread_mutex_lock(&mutex);
    printf("Car %d arrived from %s\n", id, dir == 0 ? "North" : "South");

    // Wait for the signal to turn green
    while(dir != direction) {
        pthread_mutex_unlock(&mutex);
        usleep(rand() % 1000); // Wait for a random amount of time
        pthread_mutex_lock(&mutex);
    }

    // Enter the tunnel
    printf("Car %d entered the tunnel from %s\n", id, dir == 0 ? "North" : "South");
    pthread_mutex_unlock(&mutex);

    // Travel through the tunnel
    usleep(rand() % 1000); // Simulate traveling through the tunnel

    // Exit the tunnel
    pthread_mutex_lock(&mutex);
    printf("Car %d exited the tunnel from %s\n", id, dir == 0 ? "South" : "North");

    // Change the direction if necessary
    if(direction == dir) {
        direction = (direction + 1) % 2;
        printf("Signal light turned %s\n", direction == 0 ? "green (North-South)" : "green (South-North)");
    }

    pthread_mutex_unlock(&mutex);

    // End of thread
    pthread_exit(NULL);
}

int main() {
    pthread_t threads[NUM_THREADS];
    int ids[NUM_THREADS];
    int i;

    srand(time(NULL));

    pthread_mutex_init(&mutex, NULL);

    // Create threads for the cars
    for(i = 0; i < NUM_THREADS; i++) {
        ids[i] = i;
        pthread_create(&threads[i], NULL, car, (void*)&ids[i]);
    }

    // Wait for all threads to finish
    for(i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }

    pthread_mutex_destroy(&mutex);

    return 0;
}
